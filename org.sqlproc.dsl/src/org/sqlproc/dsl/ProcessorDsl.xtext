grammar org.sqlproc.dsl.ProcessorDsl hidden(ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

generate processorDsl "http://www.sqlproc.org/dsl/ProcessorDsl"

Artifacts: {Artifacts}
    WS* (properties+=Property WS*|pojos+=PojoDefinition WS*|tables+=TableDefinition WS*
    	|procedures+=ProcedureDefinition WS*|functions+=FunctionDefinition WS*
    	|statements+=MetaStatement WS*|mappings+=MappingRule WS*|features+=OptionalFeature WS*
    	|pojoPackages+=PackageDeclaration WS*
    )*;

DatabaseCatalogAssignement: dbCatalog=PropertyValue;
DatabaseSchemaAssignement: dbSchema=PropertyValue;
DatabaseTypeAssignement: dbType=IDENT;
DatabaseMetaInfoAssignement: dbMetaInfo=PropertyValue;
DriverMetaInfoAssignement: dbDriverInfo=PropertyValue;
DriverMethodOutputAssignement: driverMethod=IDENT '->' callOutput=PropertyValue;
SqlTypeAssignement: typeName=IDENT (LPAREN size=NUMBER RPAREN)? '->' type=PojoType;
ColumnTypeAssignement: dbColumn=IDENT '->' type=PojoType;
ShowColumnTypeAssignement: dbColumn=IDENT '->' type=PropertyValue;
TableAssignement: dbTable=IDENT '->' newName=IDENT;
JoinTableAssignement: dbTable=IDENT ('->' dbTables+=IDENT)+;
ColumnAssignement: dbColumn=IDENT '->' newName=IDENT;
ImportAssignement: dbColumn=IDENT '->' pkTable=IDENT ('->' pkColumn=IDENT)?;
ExportAssignement: dbColumn=IDENT '->' fkTable=IDENT ('->' fkColumn=IDENT)?;
InheritanceAssignement: discriminator=IDENT '->' dbTable=IDENT ('->' dbColumns+=IDENT)+;
ManyToManyAssignement: pkColumn=IDENT '->' pkTable=IDENT ('->' fkColumn=IDENT)?;
DebugLevelAssignement: debug=IDENT (WS+ scope=PropertyValue)?;
ProcedurePojoAssignement: dbProcedure=IDENT '->' pojo=PojoType;
FunctionPojoAssignement: dbFunction=IDENT '->' pojo=PojoType;
ImplementsAssignement: toImplement=[jvmTypes::JvmType|QualifiedName] (WS+ PLUS (WS+ dbTables+=IDENT)+)? (WS+ MINUS (WS+ dbNotTables+=IDENT)+)?;
ExtendsAssignement: toExtends=[jvmTypes::JvmType|QualifiedName] (WS+ PLUS (WS+ dbTables+=IDENT)+)? (WS+ MINUS (WS+ dbNotTables+=IDENT)+)?;
ImplementsAssignementGenerics: toImplement=[jvmTypes::JvmType|QualifiedName] (WS+ PLUS (WS+ dbTables+=IDENT)+)? (WS+ MINUS (WS+ dbNotTables+=IDENT)+)?;
ExtendsAssignementGenerics: toExtends=[jvmTypes::JvmType|QualifiedName] (WS+ PLUS (WS+ dbTables+=IDENT)+)? (WS+ MINUS (WS+ dbNotTables+=IDENT)+)?;

Property:
	(name='resolve-pojo-on'
	|name='resolve-pojo-off'
	|name='database-' database=DatabaseProperty
	|name='pojogen-' pojogen=PojogenProperty
	|name='metagen-' metagen=MetagenProperty
	|name='daogen-' daogen=DaogenProperty
	|name='replace-all-regex' WS+ replaceId=IDENT WS+ regex=PropertyValue
	|name='replace-all-replacement' WS+ replaceId=IDENT WS+ replacement=PropertyValue
	) SEMICOLON;

DatabaseProperty:
	(name='is-online'
	|name='is-offline'
	|name='has-url' WS+ dbUrl=PropertyValue
	|name='login-username' WS+ dbUsername=PropertyValue
	|name='login-password' WS+ dbPassword=PropertyValue
	|name='in-catalog' WS+ dbCatalog=DatabaseCatalogAssignement
	|name='active-schema' WS+ dbSchema=DatabaseSchemaAssignement
	|name='jdbc-driver' WS+ (=> COLON dbDriverx=[jvmTypes::JvmType|QualifiedName]|dbDriver=PropertyValue)
	|name='ddl-create' WS+ dbExecuteBefore=PropertyValue
	|name='ddl-drop' WS+ dbExecuteAfter=PropertyValue
	|name='index-types' WS+ dbIndexTypes=PropertyValue
	|name='skip-indexes'
	|name='skip-functions-procedures'
	|name='skip-check-constraints'
	|name='is-of-type' WS+ dbType=DatabaseTypeAssignement
	|name='show-database-info' WS+ dbMetaInfo=DatabaseMetaInfoAssignement
	|name='show-driver-info' WS+ dbDriverInfo=DriverMetaInfoAssignement
	|name='show-driver-output' (WS+ dbMethodsCalls+=DriverMethodOutputAssignement)+
	|name='debug-level' WS+ debug=DebugLevelAssignement
	|name='take-comments'
	|name='lowercase-names'
	|name='uppercase-names'
	);

PojogenProperty:
	(name='types-sqltypes' (WS+ sqlTypes+=SqlTypeAssignement)+
	|name='types-in-table' WS+ dbTable=IDENT (WS+ sqlTypes+=SqlTypeAssignement)+
	|name='types-for-columns' WS+ dbTable=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+
	|name='types-for-procedure' WS+ dbProcedure=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+
	|name='types-for-function' WS+ dbFunction=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+
	|name='show-type-for-column' WS+ dbTable=IDENT WS+ columnType=ShowColumnTypeAssignement
	|name='show-type-for-procedure' WS+ dbProcedure=IDENT WS+ columnType=ShowColumnTypeAssignement
	|name='show-type-for-function' WS+ dbFunction=IDENT WS+ columnType=ShowColumnTypeAssignement
	|name='ignore-tables' (WS+ dbTables+=IDENT)+
	|name='only-tables' (WS+ dbTables+=IDENT)+
	|name='not-abstract-tables' (WS+ dbTables+=IDENT)+
	|name='join-tables' (WS+ joinTables+=JoinTableAssignement)+
	|name='ignore-columns' WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+
	|name='required-columns' WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+
	|name='not-required-columns' WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+
	|name='create-columns' WS+ dbTable=IDENT (WS+ columnTypes+=ColumnTypeAssignement)+
	|name='rename-tables' (WS+ tables+=TableAssignement)+
	|name='rename-columns' WS+ dbTable=IDENT (WS+ columns+=ColumnAssignement)+
	|name='ignore-one-to-many' WS+ dbTable=IDENT (WS+ exports+=ExportAssignement)+ // exports
	|name='ignore-many-to-one' WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
	|name='inherit-many-to-one' WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
	|name='create-one-to-many' WS+ dbTable=IDENT (WS+ exports+=ExportAssignement)+ // exports
	|name='create-many-to-one' WS+ dbTable=IDENT (WS+ imports+=ImportAssignement)+ // imports
	|name='table-many-to-many' WS+ dbTable=IDENT (WS+ many2s+=ManyToManyAssignement)+
	|name='inherit-discriminator' WS+ dbTable=IDENT WS+ dbColumn=IDENT (WS+ inheritance+=InheritanceAssignement)+
	|name='generate-methods' (WS+ methods+=IDENT)+
	|name='generate-operators' (WS+ operatorsSuffix=IDENT)?
	|name='implements-interfaces' WS+ toImplements=ImplementsAssignement 
	|name='extends-class' WS+ toExtends=ExtendsAssignement
	|name='implements-interfaces-generics' WS+ toImplementsGenerics=ImplementsAssignementGenerics 
	|name='extends-class-generics' WS+ toExtendsGenerics=ExtendsAssignementGenerics
	|name='generate-wrappers'
	|name='generate-validation-annotations'
	|name='preserve-foreign-keys' (WS+ dbTables+=IDENT)*
	|name='implementation-package' WS+ implPackage=IDENT
	|name='make-it-final'
	|name='version-column' WS+ version=IDENT (WS+ PLUS (WS+ dbTables+=IDENT)+)? (WS+ MINUS (WS+ dbNotTables+=IDENT)+)?
	|name='debug-level' WS+ debug=DebugLevelAssignement
	|name='pojos-for-procedures' (WS+ procPojos+=ProcedurePojoAssignement)+
	|name='pojos-for-functions' (WS+ funPojos+=FunctionPojoAssignement)+
	|name='active-filter' WS+ activeFilter=PropertyValue
	|name='package' WS+ pckg=PropertyValue
	|name='enum-for-check-constraints' WS+ enumName=IDENT (WS+ dbCheckConstraints+=IDENT)+
	);

MetaTypeAssignement: dbColumn=IDENT '->' type=IDENT ('->' extension=IDENT)?;

MetagenProperty:
	(name='global-sequence' WS+ sequence=IDENT (type=IDENT)? (WS+ PLUS (WS+ dbTables+=IDENT)+)? (WS+ MINUS (WS+ dbNotTables+=IDENT)+)?
	|name='table-sequence' WS+ dbTable=IDENT WS+ sequence=IDENT (WS+ type=IDENT)?
	|name='global-identity' (WS+ identity=IDENT (type=IDENT)?)? (WS+ PLUS (WS+ dbTables+=IDENT)+)? (WS+ MINUS (WS+ dbNotTables+=IDENT)+)?
	|name='table-identity' WS+ dbTable=IDENT WS+ identity=IDENT (WS+ type=IDENT)?
	|name='column-meta-type' WS+ dbTable=IDENT (WS+ metaTypes+=MetaTypeAssignement)+
	|name='statement-meta-type' WS+ dbStatement=IDENT (WS+ metaTypes+=MetaTypeAssignement)+
	|name='make-it-final'
	|name='like-columns' (WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+)?
	|name='not-like-columns' (WS+ dbTable=IDENT (WS+ dbColumns+=IDENT)+)?
	|name='generate-sequences'
	|name='generate-identities'
	|name='generate-idgenerators'
	|name='generate-default-idgenerators'
	|name='function-result' WS+ dbFunction=IDENT WS+ type=IDENT
	|name='function-result-set' WS+ dbFunction=IDENT WS+ dbTable=IDENT
	|name='procedure-result-set' WS+ dbProcedure=IDENT WS+ dbTable=IDENT
	|name='debug-level' WS+ debug=DebugLevelAssignement
	|name='generate-operators'
	|name='optimize-insert' (WS+ dbTables+=IDENT)*
	|name='optional-features' WS+ dbStatement=IDENT (WS+ optionalFeatures+=IDENT)+
	|name='active-filter' WS+ activeFilter=PropertyValue
	);

DaogenProperty:
	(name='ignore-tables' (WS+ dbTables+=IDENT)+
	|name='only-tables' (WS+ dbTables+=IDENT)*
	|name='implementation-package' WS+ implPackage=IDENT
	|name='implements-interfaces' WS+ toImplements=ImplementsAssignement
	|name='extends-class' WS+ toExtends=ExtendsAssignement
	|name='implements-interfaces-generics' WS+ toImplementsGenerics=ImplementsAssignementGenerics 
	|name='extends-class-generics' WS+ toExtendsGenerics=ExtendsAssignementGenerics
	|name='make-it-final'
	|name='function-result' WS+ dbFunction=IDENT WS+ resultType=PojoType
	|name='debug-level' WS+ debug=DebugLevelAssignement
	|name='active-filter' WS+ activeFilter=PropertyValue
	|name='package' WS+ pckg=PropertyValue
	);

PropertyValue:
  (REST|IDENT_DOT|IDENT|NUMBER|COLON|STRING|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|RBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|PERCENT|DOT|AND|OR|ESC_CHAR|ON_OFF|STATEMENT_TYPE|MAPPING_TYPE|OPTION_TYPE)
  (=> (REST|IDENT_DOT|IDENT|NUMBER|WS|COLON|STRING|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|RBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|PERCENT|DOT|AND|OR|ESC_CHAR|ON_OFF|STATEMENT_TYPE|MAPPING_TYPE|OPTION_TYPE)*)
  | STRING_VALUE;

PojoDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
	'pojo' name=IDENT (class=(IDENT|IDENT_DOT) | COLON classx=[jvmTypes::JvmType|QualifiedName]) SEMICOLON;

TableDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
	'table' name=IDENT table=IDENT SEMICOLON;

ProcedureDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
	'procedure' name=IDENT table=IDENT SEMICOLON;

FunctionDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
	'function' name=IDENT table=IDENT SEMICOLON;

MetaStatement:
	name=IDENT LPAREN type=STATEMENT_TYPE (COMMA modifiers+=StatementModifier)* RPAREN EQUALS statement=Sql SEMICOLON;

Sql: (sqls+=SqlFragment)+;

SqlFragment:
	value=SqlValue
    | AT col=Column
    | STRING cnst=Constant
    | COLON ident=Identifier
    | STRING STRING cnstOper=ConstantOperator
    | COLON COLON identOper=IdentifierOperator
    | LBRACE meta=MetaSql RBRACE
    | PERCENT (PERCENT dbtab=DatabaseTable|dbcol=DatabaseColumn)
    ;

SqlValue: //~(COLON | STRING | AT | LBRACE | SEMICOLON)
  (REST|IDENT_DOT|IDENT|NUMBER|WS|COMMA|MINUS|PLUS|LPAREN|RPAREN|RBRACE|QUESTI|NOT|BAND|BOR|HASH|CARET|EQUALS|LESS_THAN|MORE_THAN|DOT|AND|OR|ESC_CHAR|ON_OFF|STATEMENT_TYPE|MAPPING_TYPE|OPTION_TYPE)
  (=> (REST|IDENT_DOT|IDENT|NUMBER|WS|COMMA|MINUS|PLUS|LPAREN|RPAREN|RBRACE|QUESTI|NOT|BAND|BOR|HASH|CARET|EQUALS|LESS_THAN|MORE_THAN|DOT|AND|OR|ESC_CHAR|ON_OFF|STATEMENT_TYPE|MAPPING_TYPE|OPTION_TYPE)*);


MetaSql:
    WS ifs+=IfSql (BOR ifs+=IfSql)*
    | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)*
    | type=BAND ifs+=IfSql (BOR ifs+=IfSql)*
    | type=BOR ifs+=IfSql (BOR ifs+=IfSql)*
    | type=EQUALS WS* ftype=IDENT ifs+=IfSql
    | type=HASH NUMBER ord=OrdSql
    ;

IfSql: (sqls+=IfSqlFragment)+;

IfSqlFragment:
	value=IfSqlValue
    | AT col=Column
    | STRING cnst=Constant
    | COLON ident=Identifier
    | STRING STRING cnstOper=ConstantOperator
    | COLON COLON identOper=IdentifierOperator
    | PERCENT (PERCENT dbtab=DatabaseTable|dbcol=DatabaseColumn)
    | LBRACE meta=IfMetaSql RBRACE
    ;

IfSqlValue: //~(COLON | STRING | AT | LBRACE | BOR | RBRACE)
  (REST|IDENT_DOT|IDENT|NUMBER|WS|SEMICOLON|COMMA|MINUS|PLUS|LPAREN|RPAREN|QUESTI|NOT|BAND|HASH|CARET|EQUALS|LESS_THAN|MORE_THAN|DOT|AND|OR|ESC_CHAR|ON_OFF|STATEMENT_TYPE|MAPPING_TYPE|OPTION_TYPE)
  (=> (REST|IDENT_DOT|IDENT|NUMBER|WS|SEMICOLON|COMMA|MINUS|PLUS|LPAREN|RPAREN|QUESTI|NOT|BAND|HASH|CARET|EQUALS|LESS_THAN|MORE_THAN|DOT|AND|OR|ESC_CHAR|ON_OFF|STATEMENT_TYPE|MAPPING_TYPE|OPTION_TYPE)*);

IfMetaSql:
    WS ifs+=IfSql (BOR ifs+=IfSql)*
    | type=QUESTI cond=IfSqlCond BOR ifs+=IfSql (BOR ifs+=IfSql)*
    | type=BAND ifs+=IfSql (BOR ifs+=IfSql)*
    | type=BOR ifs+=IfSql (BOR ifs+=IfSql)*
    ;

IfSqlCond:
    WS* bool1=IfSqlBool WS* (oper+=(AND|OR) WS* bool2+=IfSqlBool WS*)*;

IfSqlBool:
    (not?=NOT)? STRING cnst=Constant
    | (not?=NOT)? COLON ident=Identifier
    | (not?=NOT)? LPAREN cond=IfSqlCond RPAREN
    ;

OrdSql: (sqls+=OrdSql2)+;

OrdSql2:
    value=OrdSqlValue
    | STRING cnst=Constant
    | COLON ident=Identifier
    | PERCENT dbcol=DatabaseColumn
    ;

OrdSqlValue: //~(COLON | STRING | PERCENT | RBRACE)
  (REST|IDENT_DOT|IDENT|NUMBER|WS|SEMICOLON|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|DOT|AND|OR|ESC_CHAR|ON_OFF|STATEMENT_TYPE|MAPPING_TYPE|OPTION_TYPE)
  (=> (REST|IDENT_DOT|IDENT|NUMBER|WS|SEMICOLON|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|DOT|AND|OR|ESC_CHAR|ON_OFF|STATEMENT_TYPE|MAPPING_TYPE|OPTION_TYPE)*);

Column:
    columns += ExtendedColumn (=> columns += ExtendedColumn)*;

ExtendedColumn: 
	col=ExtendedColumnName (=> LPAREN modifiers+=Modifier (COMMA modifiers+=Modifier)* RPAREN)?;

ExtendedColumnName: 
	name=(IDENT|NUMBER|IDENT_DOT);

Constant:
    (case=(PLUS|MINUS))? name=(IDENT|IDENT_DOT)
    (=> LPAREN modifiers+=Modifier (COMMA modifiers+=Modifier)* RPAREN)?;

Identifier:
    (mode=(EQUALS|LESS_THAN|MORE_THAN))? (case=(PLUS|MINUS))? name=(IDENT|NUMBER|IDENT_DOT)
    (=> LPAREN modifiers+=Modifier (COMMA modifiers+=Modifier)* RPAREN)?;

ConstantOperator:
	name=(IDENT|EQUALS);

IdentifierOperator:
	name=(IDENT|EQUALS);
	
DatabaseColumn:
    name=(IDENT|IDENT_DOT);

DatabaseTable:
    name=(IDENT|IDENT_DOT);

MappingRule:
	name=IDENT LPAREN type=MAPPING_TYPE (COMMA modifiers+=MappingRuleModifier)* RPAREN EQUALS mapping=Mapping SEMICOLON;

Mapping:
	WS* mappingItems+=MappingItem (WS+ mappingItems+=MappingItem)* WS*;

MappingItem:
	name=(IDENT|NUMBER) (STRING attr = MappingColumn)?;

MappingColumn:
	items += ExtendedMappingItem (=> items += ExtendedMappingItem)*;
	
ExtendedMappingItem:
	attr=MappingColumnName (=> LPAREN modifiers+=MappingItemModifier (COMMA modifiers+=MappingItemModifier)* RPAREN)?;

MappingColumnName:
    name=(IDENT|IDENT_DOT|NUMBER);

OptionalFeature:
	name=IDENT LPAREN type=OPTION_TYPE (COMMA modifiers+=OptionalFeatureModifier)* RPAREN EQUALS option=FeatureValue SEMICOLON;

StatementModifier: (IDENT | NUMBER);
MappingRuleModifier: (IDENT | NUMBER);
MappingItemModifier: (IDENT | NUMBER);
OptionalFeatureModifier: (IDENT | NUMBER);
Modifier: (NOT? (IDENT | NUMBER));

terminal ON_OFF: 'ON'|'OFF';
terminal STATEMENT_TYPE: 'QRY'|'CRUD'|'CALL';
terminal MAPPING_TYPE: 'OUT';
terminal OPTION_TYPE: 'OPT'|'LOPT'|'IOPT'|'SOPT'|'BOPT'|'MOPT';

//terminal IDENT_TYPE: IDENT LPAREN NUMBER (COMMA NUMBER)? RPAREN;
terminal IDENT_DOT: IDENT (DOT IDENT)+;
terminal IDENT: ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'=')*;
terminal NUMBER: ('0'..'9')+;
//terminal NEGATIVE_NUMBER: '-'('0'..'9')+;

terminal ESC_CHAR:  '\\' (COLON | SEMICOLON | STRING | LBRACE | RBRACE | BOR | HASH | AT | PERCENT | DOT | '/');
terminal ML_COMMENT : '/*' -> '*/' ;
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')? ;
terminal WS:    (' '|'\t'|'\n'|'\r')+ ;
terminal AND:   '&' '&' ;
terminal OR:    '|' '|' ;

terminal COLON:    ':' ;
terminal SEMICOLON:';' ;
terminal STRING:   '$' ;
terminal COMMA:    ',' ;
terminal MINUS:    '-' ;
terminal PLUS:     '+' ;
terminal LPAREN:   '(' ;
terminal RPAREN:   ')' ;
terminal LBRACE:   '{' ;
terminal RBRACE:   '}' ;
terminal QUESTI:   '?' ;
terminal NOT:      '!' ;
terminal BAND:     '&' ;
terminal BOR:      '|' ;
terminal HASH:     '#' ;
terminal AT:	   '@';
terminal CARET:    '^';
terminal EQUALS:   '=' ;
terminal LESS_THAN:'<' ;
terminal MORE_THAN:'>' ;
terminal PERCENT:  '%' ;
terminal DOT:      '.' ;

terminal REST: !(SEMICOLON);

terminal STRING_VALUE : '\"' -> '\"' ;

FeatureValue:
  (REST|IDENT_DOT|IDENT|NUMBER|WS|COLON|STRING|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|RBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|PERCENT|AND|OR|ESC_CHAR|ON_OFF|STATEMENT_TYPE|MAPPING_TYPE|OPTION_TYPE)+
;


PojoType hidden(ML_COMMENT, SL_COMMENT, WS):
	(COLON type=[jvmTypes::JvmType|QualifiedName] | ref=[PojoEntity|IDENT])
	(LESS_THAN (COLON gtype=[jvmTypes::JvmType|QualifiedName] | gref=[PojoEntity|IDENT]) MORE_THAN)?
	(array ?= '[]')?
;

DaoType hidden(ML_COMMENT, SL_COMMENT, WS):
	(COLON type=[jvmTypes::JvmType|QualifiedName] | ref=[PojoDao|IDENT])
	(LESS_THAN (COLON gtype=[jvmTypes::JvmType|QualifiedName] | gref=[PojoDao|IDENT]) MORE_THAN)?
;

PackageDirective hidden(ML_COMMENT, SL_COMMENT, WS):
	{PackageDirectiveSuffix} '#Suffix' LPAREN suffix=(IDENT|NUMBER) RPAREN
;

PackageDeclaration hidden(ML_COMMENT, SL_COMMENT, WS):
	directives+=PackageDirective 'package' name=(IDENT|IDENT_DOT)
		elements+=AbstractEntity*
	RBRACE
;

AbstractEntity hidden(ML_COMMENT, SL_COMMENT, WS):
	PackageDeclaration | PojoEntity | EnumEntity | Import | Implements | Extends | ImplPackage | PojoDao;

Import hidden(ML_COMMENT, SL_COMMENT, WS):
	'import' importedNamespace = QualifiedNameWithWildcard;

Implements hidden(ML_COMMENT, SL_COMMENT, WS):
	'implements' implements=PojoType (generics ?= '<<>>')? 
	('onlyPojos' onlyPojos+=[PojoEntity|IDENT]*)? 
	('onlyDaos' onlyDaos+=[PojoDao|IDENT]*)? 
	('exceptPojos' exceptPojos+=[PojoEntity|IDENT]*)? 
	('exceptDaos' exceptDaos+=[PojoDao|IDENT]*)?
;

Extends hidden(ML_COMMENT, SL_COMMENT, WS):
	'extends' extends=PojoType (generics ?= '<<>>')? 
	('onlyPojos' onlyPojos+=[PojoEntity|IDENT]*)? 
	('onlyDaos' onlyDaos+=[PojoDao|IDENT]*)? 
	('exceptPojos' exceptPojos+=[PojoEntity|IDENT]*)? 
	('exceptDaos' exceptDaos+=[PojoDao|IDENT]*)?
;

ImplPackage hidden(ML_COMMENT, SL_COMMENT, WS):
	'implementation-package' name=(IDENT|IDENT_DOT);

AnnotationProperty hidden(ML_COMMENT, SL_COMMENT, WS):
	name=IDENT EQUALS (type=PojoType | number=NUMBER | value=STRING_VALUE | EQUALS constant=IDENT)
;

Annotation hidden(ML_COMMENT, SL_COMMENT, WS):
	type=PojoType (LPAREN features+=AnnotationProperty (COMMA features+=AnnotationProperty+)? RPAREN)?
;

EntityAnnotation hidden(ML_COMMENT, SL_COMMENT, WS):
	 AT (=> AT (=> AT (=> AT {ConflictAnnotations} annotation=Annotation 
	| {StaticAnnotations} annotation=Annotation) 
	| {ConstructorAnnotations} annotation=Annotation) 
	| {StandardAnnotation} annotation=Annotation)
;

DirectiveProperties hidden(ML_COMMENT, SL_COMMENT, WS):
	LPAREN properties+=PojogenProperty (COMMA properties+=PojogenProperty)* RPAREN
;

PojoDirective hidden(ML_COMMENT, SL_COMMENT, WS): 
	{PojoDirectiveFinal} '#Final'
	| {PojoDirectiveAbstract} '#Abstract'
	| {PojoDirectiveExtends} '#Extends' LPAREN superType=PojoType RPAREN
	| {PojoDirectiveDiscriminator} '#Discriminator' LPAREN discriminator=(IDENT|NUMBER) RPAREN
	| {PojoDirectiveOperators} '#Operators' (LPAREN operatorsSuffix=IDENT RPAREN)?
	| {PojoDirectiveSerializable} '#Serializable' LPAREN sernum=NUMBER RPAREN
	| {PojoDirectiveEquals} '#Equals' (proplist=DirectiveProperties)?
	| {PojoDirectiveHashCode} '#HashCode' (proplist=DirectiveProperties)?
	| {PojoDirectiveToInit} '#ToInit' (proplist=DirectiveProperties)?
	| {PojoDirectiveIsDef} '#IsDef' (proplist=DirectiveProperties)?
	| {PojoDirectiveToString} '#ToString' (proplist=DirectiveProperties)?
	;

PojoEntity hidden(ML_COMMENT, SL_COMMENT, WS):
	annotations+=EntityAnnotation+ directives+=PojoDirective* 'pojo' name=IDENT
	LBRACE
		features+=PojoProperty*
	RBRACE;

PojoPropertyAnnotation hidden(ML_COMMENT, SL_COMMENT, WS):
	AT (=> AT (=> AT {SetterAnnotations} annotation=Annotation 
	| {GetterAnnotations} annotation=Annotation) 
	| {AttributeAnnotations} annotation=Annotation)
;

PojoPropertyDirective hidden(ML_COMMENT, SL_COMMENT, WS): 
	{PojoPropertyDirectiveRequired} '#Required'
	| {PojoPropertyDirectivePrimaryKey} '#PrimaryKey'
	| {PojoPropertyDirectiveDiscriminator} '#Discriminator' LPAREN discriminator=(IDENT|NUMBER) RPAREN
	| {PojoPropertyDirectiveIndex} '#Index' LPAREN index=NUMBER RPAREN
	| {PojoPropertyDirectiveVersion} '#Version'
	| {PojoPropertyDirectiveUpdateCol} '#UpdateCol' LPAREN updateColumn1=IDENT COMMA updateColumn2=IDENT RPAREN
	| {PojoPropertyDirectiveCreateCol} '#CreateCol' LPAREN createColumn1=IDENT COMMA createColumn2=IDENT RPAREN
	;

PojoProperty hidden(ML_COMMENT, SL_COMMENT, WS):
	annotations+=PojoPropertyAnnotation directives+=PojoPropertyDirective* name=IDENT type=PojoType
;

EnumDirective hidden(ML_COMMENT, SL_COMMENT, WS):
	{EnumDirectiveFinal} '#Final'
	| {EnumDirectiveExtends} '#Extends' LPAREN superType=PojoType RPAREN
	| {EnumDirectiveSerializable} '#Serializable' LPAREN sernum=NUMBER RPAREN
	;

EnumEntity hidden(ML_COMMENT, SL_COMMENT, WS):
	annotations+=EntityAnnotation+ directives+=EnumDirective* 'enum' name=IDENT 
	LBRACE
		features+=EnumProperty*
	RBRACE;

EnumPropertyDirective hidden(ML_COMMENT, SL_COMMENT, WS):
	{EnumPropertyDirectiveValues} '#Values' LPAREN values+=(NUMBER|STRING_VALUE) RPAREN
	;

EnumProperty hidden(ML_COMMENT, SL_COMMENT, WS):
	directives+=EnumPropertyDirective name=IDENT type=PojoType
;

DirectiveParameters hidden(ML_COMMENT, SL_COMMENT, WS):
	LPAREN in=PojoType (COMMA out=PojoType)? LPAREN
;

DaoDirective hidden(ML_COMMENT, SL_COMMENT, WS):
	{DaoDirectiveFinal} '#Final'
	| {DaoDirectiveAbstract} '#Abstract'
	| {DaoDirectiveExtends} '#Extends' LPAREN superType=DaoType RPAREN
	| {DaoDirectiveDiscriminator} '#Discriminator' LPAREN discriminator=(IDENT|NUMBER) RPAREN
	| {DaoDirectiveSerializable} '#Serializable' LPAREN sernum=NUMBER RPAREN
	| {DaoDirectivePojo} '#Pojo' LPAREN pojo=PojoType RPAREN
	| {DaoDirectiveGenerics} '#Generics' LPAREN generics=PojoType RPAREN
	| {DaoDirectiveProcedure} '#Procedure' LPAREN pojo=PojoType RPAREN
	| {DaoDirectiveFunction} '#Function' LPAREN pojo=PojoType RPAREN
	| {DaoDirectiveUpdate} '#Update' (paramlist=DirectiveParameters)?
	| {DaoDirectiveUpdate} '#List' (paramlist=DirectiveParameters)?
	| {DaoDirectiveUpdate} '#Call' (paramlist=DirectiveParameters)?
	;

PojoDao hidden(ML_COMMENT, SL_COMMENT, WS):
	directives+=DaoDirective* 'dao' name=IDENT
	LBRACE
	RBRACE;

QualifiedNameWithWildcard:
  QualifiedName '.*'?; 

QualifiedName: (IDENT|IDENT_DOT);

//     (REST|IDENT_DOT|IDENT|NUMBER|WS|COLON|SEMICOLON|STRING|COMMA|MINUS|PLUS|LPAREN|RPAREN|LBRACE|RBRACE|QUESTI|NOT|BAND|BOR|HASH|AT|CARET|EQUALS|LESS_THAN|MORE_THAN|PERCENT|AND|OR|ESC_CHAR)
