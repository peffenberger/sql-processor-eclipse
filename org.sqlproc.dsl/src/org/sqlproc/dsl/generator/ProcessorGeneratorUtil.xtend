/*
 * generated by Xtext
 */
package org.sqlproc.dsl.generator

import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.sqlproc.dsl.processorDsl.PojoProperty
import org.sqlproc.dsl.ImportManager

import static org.sqlproc.dsl.util.Utils.*
import org.sqlproc.dsl.processorDsl.PojoType
import org.sqlproc.dsl.processorDsl.EnumProperty
import org.sqlproc.dsl.processorDsl.PojoEntity
import com.google.inject.Inject
import org.sqlproc.dsl.processorDsl.PojoPropertyDirectiveUpdateCol
import org.sqlproc.dsl.processorDsl.PojoPropertyDirectiveCreateCol
import org.sqlproc.dsl.processorDsl.PojoPropertyDirectiveDiscriminator
import org.sqlproc.dsl.processorDsl.PojoPropertyDirectivePrimaryKey
import org.sqlproc.dsl.processorDsl.PojoPropertyDirectiveRequired
import org.sqlproc.dsl.processorDsl.PojoPropertyDirectiveIndex
import org.sqlproc.dsl.processorDsl.PojoPropertyDirectiveVersion
import org.sqlproc.dsl.processorDsl.EnumEntity
import java.util.List
import org.sqlproc.dsl.processorDsl.PojoDirectiveOperators
import org.sqlproc.dsl.processorDsl.PojoDao
import org.sqlproc.dsl.processorDsl.PojoDirectiveSerializable
import org.sqlproc.dsl.processorDsl.PojoDirectiveDiscriminator
import java.util.Map
import org.sqlproc.dsl.processorDsl.PojoDirectiveIndex
import java.util.TreeMap
import org.sqlproc.dsl.processorDsl.PojoPropertyDirectiveIsDef
import org.sqlproc.dsl.processorDsl.PojoPropertyDirectiveEnumInit
import org.sqlproc.dsl.processorDsl.PojoPropertyDirectiveEnumDef
import org.sqlproc.dsl.processorDsl.PojoPropertyDirectiveToInit

class ProcessorGeneratorUtils {

	@Inject extension IQualifiedNameProvider

	def compileType(EnumProperty f, ImportManager im) '''
	«IF f.getNative != null»«f.getNative.substring(1)»«ELSEIF f.getType != null»«im.serialize(f.getType)»«ENDIF»'''

	def compileType(PojoProperty f, ImportManager im) '''
	«IF f.getNative != null»«f.getNative.substring(1)»«ELSEIF f.getRef != null»«f.getRef.fullyQualifiedName»«ELSEIF f.
		getType != null»«im.serialize(f.getType)»«ENDIF»«IF f.getGtype != null»<«im.serialize(f.getGtype)»>«ENDIF»«IF f.
		getGref != null»<«f.getGref.fullyQualifiedName»>«ENDIF»«IF f.array»[]«ENDIF»'''

	def compileType(PojoType f, ImportManager im) '''
	«IF f.getNative != null»«f.getNative.substring(1)»«ELSEIF f.getRef != null»«im.serialize(pojoMethod2jvmType(f.getRef))»«ELSEIF f.
		getType != null»«im.serialize(f.getType)»«ENDIF»«IF f.getGtype != null»<«im.serialize(f.getGtype)»>«ENDIF»«IF f.
		getGref != null»<«im.serialize(pojoMethod2jvmType(f.getGref))»>«ENDIF»«IF f.array»[]«ENDIF»'''

	def completeName(PojoEntity e) {
		return getPackage(e) + "." + e.name
	}

	// PojoProperty
	def isRequired(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveRequired]
		return if(d != null) true else false
	}

	def getIndex(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveIndex] as PojoPropertyDirectiveIndex
		return d?.index
	}

	def getUpdateColumn1(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveUpdateCol] as PojoPropertyDirectiveUpdateCol
		return d?.updateColumn1
	}

	def getUpdateColumn2(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveUpdateCol] as PojoPropertyDirectiveUpdateCol
		return d?.updateColumn2
	}

	def getCreateColumn1(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveCreateCol] as PojoPropertyDirectiveCreateCol
		return d?.createColumn1
	}

	def getCreateColumn2(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveCreateCol] as PojoPropertyDirectiveCreateCol
		return d?.createColumn2
	}

	def isDiscriminator(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveDiscriminator]
		return if(d != null) true else false
	}

	def isPrimaryKey(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectivePrimaryKey]
		return if(d != null) true else false
	}

	def isOptLock(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveVersion]
		return if(d != null) true else false
	}

	def isList(PojoProperty f) {
		val name = f?.type?.simpleName
		return "List" == name
	}

	def isIsDef(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveIsDef]
		return if(d != null) true else false
	}

	def isEnumDef(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveEnumDef]
		return if(d != null) true else false
	}

	def isToInit(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveToInit]
		return if(d != null) true else false
	}

	def isEnumInit(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveEnumInit]
		return if(d != null) true else false
	}

	// PojoEntity

    def isAbstract(PojoEntity pojo) {
		val m = pojo.modifiers1?.findFirst[x|x.abstract]
		return if(m != null) true else false
    }

    def hasOperators(PojoEntity pojo) {
		val d = pojo.directives?.findFirst[x|x instanceof PojoDirectiveOperators]
		return if(d != null) true else false
    }

    def getOperatorsSuffix(PojoEntity pojo) {
		val d = pojo.directives?.findFirst[x|x instanceof PojoDirectiveOperators] as PojoDirectiveOperators
		return d?.operatorsSuffix
    }

    def String getSernum(PojoEntity pojo) {
		val d = pojo.directives?.findFirst[x|x instanceof PojoDirectiveSerializable] as PojoDirectiveSerializable
		return d?.sernum
    }
    
    def getDiscriminator(PojoEntity pojo) {
		val d = pojo.directives?.findFirst[x|x instanceof PojoDirectiveDiscriminator] as PojoDirectiveDiscriminator
		return d?.discriminator
    }

    def isFinal(PojoEntity pojo) {
		val m = pojo.modifiers1?.findFirst[x|x.final]
		return if(m != null) true else false
    }

	def PojoEntity getSuperType(PojoEntity pojo) {
		val m = pojo.modifiers2?.findFirst[x|x.superType != null]
		return m?.superType
	}

    def PojoEntity getParent(PojoEntity pojo) {
        if (getDiscriminator(pojo) != null)
            return null;
        return pojo.superType
    }

	def PojoProperty getOptLock(PojoEntity pojo) {
		val fea = pojo?.features?.findFirst[x|isOptLock(x.feature)]?.feature
		return fea ?: pojo?.getSuperType?.getOptLock
	}

    def Map<String, List<PojoProperty>> getIndex(PojoEntity pojo) {
        val Map<String, List<PojoProperty>> result = new TreeMap()
		pojo?.directives.filter[x|x instanceof PojoDirectiveIndex].forEach[
			val d = it as PojoDirectiveIndex
			result.put(d.index, d.proplist.features)
		]
        return result
    }

	def List<PojoProperty> requiredFeatures(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features.filter[x|x.feature.isRequired].map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.requiredFeatures)
		return features
	}

	def List<PojoProperty> attributes(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features.map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.requiredFeatures)
		return features
	}

    def PojoProperty getAttribute(PojoEntity pojo, String name) {
		if (pojo == null)
			return null
		val feature = pojo.features.findFirst[x|x.feature.name == name].feature
		return feature ?: pojo.superType?.getAttribute(name)
    }

	def Map<String, List<PojoProperty>> opFeatures(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features.filter[x|x.feature.isIsDef].map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.isDefFeatures)
		return features
	}

	def List<PojoProperty> isEnumDefFeatures(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features.filter[x|x.feature.isEnumDef].map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.isEnumDefFeatures)
		return features
	}

	def List<PojoProperty> isToInitFeatures(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features.filter[x|x.feature.isToInit].map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.isToInitFeatures)
		return features
	}

	def List<PojoProperty> isEnumInitFeatures(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features.filter[x|x.feature.isEnumInit].map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.isEnumInitFeatures)
		return features
	}

	// EnumEntity
    def isFinal(EnumEntity ^enum) {
		val m = ^enum.modifiers1?.findFirst[x|x.final]
		return if(m != null) true else false
    }

	def PojoEntity getSuperType(EnumEntity ^enum) {
		val m = ^enum.modifiers2?.findFirst[x|x.superType != null]
		return m?.superType
	}

    def String getSernum(EnumEntity ^enum) {
		val d = ^enum.directives?.findFirst[x|x instanceof PojoDirectiveSerializable] as PojoDirectiveSerializable
		return d?.sernum
    }

	// PojoDao
    def isFinal(PojoDao dao) {
		val m = dao.modifiers1?.findFirst[x|x.final]
		return if(m != null) true else false
    }

    def isAbstract(PojoDao dao) {
		val m = dao.modifiers1?.findFirst[x|x.abstract]
		return if(m != null) true else false
    }

    def getSernum(PojoDao dao) {
		val d = dao.directives?.findFirst[x|x instanceof PojoDirectiveSerializable] as PojoDirectiveSerializable
		return d?.sernum
    }

    def PojoDao getSuperType(PojoDao dao) {
		val m = dao.modifiers2?.findFirst[x|x.superType != null]
		return m?.superType
    }
}
