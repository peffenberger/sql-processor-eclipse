/**
 * generated by Xtext
 */
package org.sqlproc.dsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.sqlproc.dsl.ImportManager;
import org.sqlproc.dsl.generator.ProcessorGeneratorUtils;
import org.sqlproc.dsl.processorDsl.Extends;
import org.sqlproc.dsl.processorDsl.ImplPackage;
import org.sqlproc.dsl.processorDsl.Implements;
import org.sqlproc.dsl.processorDsl.PojoDao;
import org.sqlproc.dsl.processorDsl.PojoEntity;
import org.sqlproc.dsl.processorDsl.PojoProperty;
import org.sqlproc.dsl.util.Utils;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class ProcessorDaoGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Inject
  @Extension
  private ProcessorGeneratorUtils _processorGeneratorUtils;
  
  public CharSequence compile(final PojoDao d) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method getToInits is undefined for the type ProcessorDaoGenerator"
      + "\nThe method pojo is undefined for the type ProcessorDaoGenerator"
      + "\nThe method pojo is undefined for the type ProcessorDaoGenerator"
      + "\nThe method pojo is undefined for the type ProcessorDaoGenerator"
      + "\n!= cannot be resolved"
      + "\ncompleteName cannot be resolved"
      + "\nentrySet cannot be resolved"
      + "\nvalue cannot be resolved"
      + "\ntype cannot be resolved"
      + "\nref cannot be resolved"
      + "\ncompleteName cannot be resolved");
  }
  
  public CharSequence compile(final PojoDao d, final PojoEntity e, final /* Map<String, List<PojoMethodArg>> */Object toInits, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method methods is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallUpdate is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallFunction is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallQuery is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallQueryFunction is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallQueryFunction is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallSelectFunction is undefined for the type ProcessorDaoGenerator"
      + "\nType mismatch: cannot convert from PojoType to PojoEntity"
      + "\nType mismatch: cannot convert from PojoType to PojoEntity"
      + "\nType mismatch: cannot convert from PojoType to PojoEntity"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\n|| cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\n|| cannot be resolved");
  }
  
  public CharSequence compileCallQuery(final PojoDao d, final /* PojoMethod */Object m, final ImportManager im, final boolean isFunction, final boolean all) {
    throw new Error("Unresolved compilation problems:"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ngref cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileCallFunction(final PojoDao d, final /* PojoMethod */Object m, final ImportManager im, final boolean all) {
    throw new Error("Unresolved compilation problems:"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileCallUpdate(final PojoDao d, final /* PojoMethod */Object m, final ImportManager im, final boolean all) {
    throw new Error("Unresolved compilation problems:"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileCallSelectFunction(final PojoDao d, final /* PojoMethod */Object m, final ImportManager im, final boolean all) {
    throw new Error("Unresolved compilation problems:"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nget cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nget cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileInsert(final PojoDao d, final PojoEntity e, final PojoEntity pe, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" insert(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"insert ");
    String _name_3 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(": \" + ");
    String _name_4 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_4);
    _builder.append(_firstLower_2, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlCrudEngine sqlInsert");
    String _name_5 = e.getName();
    _builder.append(_name_5, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"INSERT_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    {
      boolean _notEquals = (!Objects.equal(pe, null));
      if (_notEquals) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("SqlCrudEngine sqlInsert");
        String _name_6 = pe.getName();
        _builder.append(_name_6, "\t\t");
        _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"INSERT_");
        String _dbName_1 = Utils.dbName(pe);
        _builder.append(_dbName_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("int count = sqlInsert");
        String _name_7 = pe.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append(".insert(sqlSession, ");
        String _name_8 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_8);
        _builder.append(_firstLower_3, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (count > 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("sqlInsert");
        String _name_9 = e.getName();
        _builder.append(_name_9, "\t\t\t");
        _builder.append(".insert(sqlSession, ");
        String _name_10 = e.getName();
        String _firstLower_4 = StringExtensions.toFirstLower(_name_10);
        _builder.append(_firstLower_4, "\t\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
      } else {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("int count = sqlInsert");
        String _name_11 = e.getName();
        _builder.append(_name_11, "\t\t");
        _builder.append(".insert(sqlSession, ");
        String _name_12 = e.getName();
        String _firstLower_5 = StringExtensions.toFirstLower(_name_12);
        _builder.append(_firstLower_5, "\t\t");
        _builder.append(", sqlControl);");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"insert ");
    String _name_13 = e.getName();
    String _firstLower_6 = StringExtensions.toFirstLower(_name_13);
    _builder.append(_firstLower_6, "\t\t\t");
    _builder.append(" result: \" + count + \" \" + ");
    String _name_14 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_14);
    _builder.append(_firstLower_7, "\t\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (count > 0) ? ");
    String _name_15 = e.getName();
    String _firstLower_8 = StringExtensions.toFirstLower(_name_15);
    _builder.append(_firstLower_8, "\t\t");
    _builder.append(" : null;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_16 = e.getName();
        _builder.append(_name_16, "\t");
        _builder.append(" insert(");
        String _name_17 = e.getName();
        _builder.append(_name_17, "\t");
        _builder.append(" ");
        String _name_18 = e.getName();
        String _firstLower_9 = StringExtensions.toFirstLower(_name_18);
        _builder.append(_firstLower_9, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return insert(sqlSessionFactory.getSqlSession(), ");
        String _name_19 = e.getName();
        String _firstLower_10 = StringExtensions.toFirstLower(_name_19);
        _builder.append(_firstLower_10, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public ");
    String _name_20 = e.getName();
    _builder.append(_name_20, "\t");
    _builder.append(" insert(SqlSession sqlSession, ");
    String _name_21 = e.getName();
    _builder.append(_name_21, "\t");
    _builder.append(" ");
    String _name_22 = e.getName();
    String _firstLower_11 = StringExtensions.toFirstLower(_name_22);
    _builder.append(_firstLower_11, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return insert(sqlSession, ");
    String _name_23 = e.getName();
    String _firstLower_12 = StringExtensions.toFirstLower(_name_23);
    _builder.append(_firstLower_12, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_24 = e.getName();
        _builder.append(_name_24, "\t");
        _builder.append(" insert(");
        String _name_25 = e.getName();
        _builder.append(_name_25, "\t");
        _builder.append(" ");
        String _name_26 = e.getName();
        String _firstLower_13 = StringExtensions.toFirstLower(_name_26);
        _builder.append(_firstLower_13, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return insert(");
        String _name_27 = e.getName();
        String _firstLower_14 = StringExtensions.toFirstLower(_name_27);
        _builder.append(_firstLower_14, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileGet(final PojoDao d, final PojoEntity e, final /* Map<String, List<PojoMethodArg>> */Object toInits, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" get(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"get get: \" + ");
    String _name_3 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlCrudEngine sqlGetEngine");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"GET_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    {
      boolean _isEmpty = toInits.isEmpty();
      if (_isEmpty) {
        _builder.append("//");
      }
    }
    _builder.append("sqlControl = getMoreResultClasses(");
    String _name_5 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_5);
    _builder.append(_firstLower_2, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(" ");
    String _name_7 = e.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append("Got = sqlGetEngine");
    String _name_8 = e.getName();
    _builder.append(_name_8, "\t\t");
    _builder.append(".get(sqlSession, ");
    String _name_9 = e.getName();
    _builder.append(_name_9, "\t\t");
    _builder.append(".class, ");
    String _name_10 = e.getName();
    String _firstLower_4 = StringExtensions.toFirstLower(_name_10);
    _builder.append(_firstLower_4, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"get ");
    String _name_11 = e.getName();
    String _firstLower_5 = StringExtensions.toFirstLower(_name_11);
    _builder.append(_firstLower_5, "\t\t\t");
    _builder.append(" result: \" + ");
    String _name_12 = e.getName();
    String _firstLower_6 = StringExtensions.toFirstLower(_name_12);
    _builder.append(_firstLower_6, "\t\t\t");
    _builder.append("Got);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _name_13 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_13);
    _builder.append(_firstLower_7, "\t\t");
    _builder.append("Got;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_14 = e.getName();
        _builder.append(_name_14, "\t");
        _builder.append(" get(");
        String _name_15 = e.getName();
        _builder.append(_name_15, "\t");
        _builder.append(" ");
        String _name_16 = e.getName();
        String _firstLower_8 = StringExtensions.toFirstLower(_name_16);
        _builder.append(_firstLower_8, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return get(sqlSessionFactory.getSqlSession(), ");
        String _name_17 = e.getName();
        String _firstLower_9 = StringExtensions.toFirstLower(_name_17);
        _builder.append(_firstLower_9, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public ");
    String _name_18 = e.getName();
    _builder.append(_name_18, "\t");
    _builder.append(" get(SqlSession sqlSession, ");
    String _name_19 = e.getName();
    _builder.append(_name_19, "\t");
    _builder.append(" ");
    String _name_20 = e.getName();
    String _firstLower_10 = StringExtensions.toFirstLower(_name_20);
    _builder.append(_firstLower_10, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return get(sqlSession, ");
    String _name_21 = e.getName();
    String _firstLower_11 = StringExtensions.toFirstLower(_name_21);
    _builder.append(_firstLower_11, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_22 = e.getName();
        _builder.append(_name_22, "\t");
        _builder.append(" get(");
        String _name_23 = e.getName();
        _builder.append(_name_23, "\t");
        _builder.append(" ");
        String _name_24 = e.getName();
        String _firstLower_12 = StringExtensions.toFirstLower(_name_24);
        _builder.append(_firstLower_12, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return get(");
        String _name_25 = e.getName();
        String _firstLower_13 = StringExtensions.toFirstLower(_name_25);
        _builder.append(_firstLower_13, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileUpdate(final PojoDao d, final PojoEntity e, final PojoEntity pe, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int update(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"update ");
    String _name_2 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(": \" + ");
    String _name_3 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_2, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlCrudEngine sqlUpdateEngine");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"UPDATE_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    {
      boolean _notEquals = (!Objects.equal(pe, null));
      if (_notEquals) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("SqlCrudEngine sqlUpdate");
        String _name_5 = pe.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"UPDATE_");
        String _dbName_1 = Utils.dbName(pe);
        _builder.append(_dbName_1, "\t\t");
        _builder.append("\");");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("int count = sqlUpdateEngine");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(".update(sqlSession, ");
    String _name_7 = e.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append(", sqlControl);");
    {
      boolean _notEquals_1 = (!Objects.equal(pe, null));
      if (_notEquals_1) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (count > 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("sqlUpdate");
        String _name_8 = pe.getName();
        _builder.append(_name_8, "\t\t\t");
        _builder.append(".update(sqlSession, ");
        String _name_9 = e.getName();
        String _firstLower_4 = StringExtensions.toFirstLower(_name_9);
        _builder.append(_firstLower_4, "\t\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
      }
    }
    final PojoProperty f = Utils.getOptLock(e);
    {
      boolean _notEquals_2 = (!Objects.equal(f, null));
      if (_notEquals_2) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (count > 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        String _name_10 = e.getName();
        String _firstLower_5 = StringExtensions.toFirstLower(_name_10);
        _builder.append(_firstLower_5, "\t\t\t");
        _builder.append(".set");
        String _name_11 = f.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_11);
        _builder.append(_firstUpper, "\t\t\t");
        _builder.append("(");
        String _name_12 = e.getName();
        String _firstLower_6 = StringExtensions.toFirstLower(_name_12);
        _builder.append(_firstLower_6, "\t\t\t");
        _builder.append(".get");
        String _name_13 = f.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_13);
        _builder.append(_firstUpper_1, "\t\t\t");
        _builder.append("() + 1);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"update ");
    String _name_14 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_14);
    _builder.append(_firstLower_7, "\t\t\t");
    _builder.append(" result count: \" + count);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int update(");
        String _name_15 = e.getName();
        _builder.append(_name_15, "\t");
        _builder.append(" ");
        String _name_16 = e.getName();
        String _firstLower_8 = StringExtensions.toFirstLower(_name_16);
        _builder.append(_firstLower_8, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return update(sqlSessionFactory.getSqlSession(), ");
        String _name_17 = e.getName();
        String _firstLower_9 = StringExtensions.toFirstLower(_name_17);
        _builder.append(_firstLower_9, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public int update(SqlSession sqlSession, ");
    String _name_18 = e.getName();
    _builder.append(_name_18, "\t");
    _builder.append(" ");
    String _name_19 = e.getName();
    String _firstLower_10 = StringExtensions.toFirstLower(_name_19);
    _builder.append(_firstLower_10, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return update(sqlSession, ");
    String _name_20 = e.getName();
    String _firstLower_11 = StringExtensions.toFirstLower(_name_20);
    _builder.append(_firstLower_11, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int update(");
        String _name_21 = e.getName();
        _builder.append(_name_21, "\t");
        _builder.append(" ");
        String _name_22 = e.getName();
        String _firstLower_12 = StringExtensions.toFirstLower(_name_22);
        _builder.append(_firstLower_12, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return update(");
        String _name_23 = e.getName();
        String _firstLower_13 = StringExtensions.toFirstLower(_name_23);
        _builder.append(_firstLower_13, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileDelete(final PojoDao d, final PojoEntity e, final PojoEntity pe, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int delete(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"delete ");
    String _name_2 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(": \" + ");
    String _name_3 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_2, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlCrudEngine sqlDeleteEngine");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"DELETE_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    {
      boolean _notEquals = (!Objects.equal(pe, null));
      if (_notEquals) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("SqlCrudEngine sqlDelete");
        String _name_5 = pe.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"DELETE_");
        String _dbName_1 = Utils.dbName(pe);
        _builder.append(_dbName_1, "\t\t");
        _builder.append("\");");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("int count = sqlDeleteEngine");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(".delete(sqlSession, ");
    String _name_7 = e.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append(", sqlControl);");
    {
      boolean _notEquals_1 = (!Objects.equal(pe, null));
      if (_notEquals_1) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (count > 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("sqlDelete");
        String _name_8 = pe.getName();
        _builder.append(_name_8, "\t\t\t");
        _builder.append(".delete(sqlSession, ");
        String _name_9 = e.getName();
        String _firstLower_4 = StringExtensions.toFirstLower(_name_9);
        _builder.append(_firstLower_4, "\t\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
      }
    }
    final PojoProperty f = Utils.getOptLock(e);
    {
      boolean _notEquals_2 = (!Objects.equal(f, null));
      if (_notEquals_2) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (count > 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        String _name_10 = e.getName();
        String _firstLower_5 = StringExtensions.toFirstLower(_name_10);
        _builder.append(_firstLower_5, "\t\t\t");
        _builder.append(".set");
        String _name_11 = f.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_11);
        _builder.append(_firstUpper, "\t\t\t");
        _builder.append("(");
        String _name_12 = e.getName();
        String _firstLower_6 = StringExtensions.toFirstLower(_name_12);
        _builder.append(_firstLower_6, "\t\t\t");
        _builder.append(".get");
        String _name_13 = f.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_13);
        _builder.append(_firstUpper_1, "\t\t\t");
        _builder.append("() + 1);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"delete ");
    String _name_14 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_14);
    _builder.append(_firstLower_7, "\t\t\t");
    _builder.append(" result count: \" + count);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int delete(");
        String _name_15 = e.getName();
        _builder.append(_name_15, "\t");
        _builder.append(" ");
        String _name_16 = e.getName();
        String _firstLower_8 = StringExtensions.toFirstLower(_name_16);
        _builder.append(_firstLower_8, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return delete(sqlSessionFactory.getSqlSession(), ");
        String _name_17 = e.getName();
        String _firstLower_9 = StringExtensions.toFirstLower(_name_17);
        _builder.append(_firstLower_9, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public int delete(SqlSession sqlSession, ");
    String _name_18 = e.getName();
    _builder.append(_name_18, "\t");
    _builder.append(" ");
    String _name_19 = e.getName();
    String _firstLower_10 = StringExtensions.toFirstLower(_name_19);
    _builder.append(_firstLower_10, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return delete(sqlSession, ");
    String _name_20 = e.getName();
    String _firstLower_11 = StringExtensions.toFirstLower(_name_20);
    _builder.append(_firstLower_11, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int delete(");
        String _name_21 = e.getName();
        _builder.append(_name_21, "\t");
        _builder.append(" ");
        String _name_22 = e.getName();
        String _firstLower_12 = StringExtensions.toFirstLower(_name_22);
        _builder.append(_firstLower_12, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return delete(");
        String _name_23 = e.getName();
        String _firstLower_13 = StringExtensions.toFirstLower(_name_23);
        _builder.append(_firstLower_13, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileList(final PojoDao d, final PojoEntity e, final /* Map<String, List<PojoMethodArg>> */Object toInits, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append("> list(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"list ");
    String _name_3 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(": \" + ");
    String _name_4 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_4);
    _builder.append(_firstLower_2, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlQueryEngine sqlEngine");
    String _name_5 = e.getName();
    _builder.append(_name_5, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedQueryEngine(\"SELECT_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    {
      boolean _isEmpty = toInits.isEmpty();
      if (_isEmpty) {
        _builder.append("//");
      }
    }
    _builder.append("sqlControl = getMoreResultClasses(");
    String _name_6 = e.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_6);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("List<");
    String _name_7 = e.getName();
    _builder.append(_name_7, "\t\t");
    _builder.append("> ");
    String _name_8 = e.getName();
    String _firstLower_4 = StringExtensions.toFirstLower(_name_8);
    _builder.append(_firstLower_4, "\t\t");
    _builder.append("List = sqlEngine");
    String _name_9 = e.getName();
    _builder.append(_name_9, "\t\t");
    _builder.append(".query(sqlSession, ");
    String _name_10 = e.getName();
    _builder.append(_name_10, "\t\t");
    _builder.append(".class, ");
    String _name_11 = e.getName();
    String _firstLower_5 = StringExtensions.toFirstLower(_name_11);
    _builder.append(_firstLower_5, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"list ");
    String _name_12 = e.getName();
    String _firstLower_6 = StringExtensions.toFirstLower(_name_12);
    _builder.append(_firstLower_6, "\t\t\t");
    _builder.append(" size: \" + ((");
    String _name_13 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_13);
    _builder.append(_firstLower_7, "\t\t\t");
    _builder.append("List != null) ? ");
    String _name_14 = e.getName();
    String _firstLower_8 = StringExtensions.toFirstLower(_name_14);
    _builder.append(_firstLower_8, "\t\t\t");
    _builder.append("List.size() : \"null\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _name_15 = e.getName();
    String _firstLower_9 = StringExtensions.toFirstLower(_name_15);
    _builder.append(_firstLower_9, "\t\t");
    _builder.append("List;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public List<");
        String _name_16 = e.getName();
        _builder.append(_name_16, "\t");
        _builder.append("> list(");
        String _name_17 = e.getName();
        _builder.append(_name_17, "\t");
        _builder.append(" ");
        String _name_18 = e.getName();
        String _firstLower_10 = StringExtensions.toFirstLower(_name_18);
        _builder.append(_firstLower_10, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return list(sqlSessionFactory.getSqlSession(), ");
        String _name_19 = e.getName();
        String _firstLower_11 = StringExtensions.toFirstLower(_name_19);
        _builder.append(_firstLower_11, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public List<");
    String _name_20 = e.getName();
    _builder.append(_name_20, "\t");
    _builder.append("> list(SqlSession sqlSession, ");
    String _name_21 = e.getName();
    _builder.append(_name_21, "\t");
    _builder.append(" ");
    String _name_22 = e.getName();
    String _firstLower_12 = StringExtensions.toFirstLower(_name_22);
    _builder.append(_firstLower_12, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return list(sqlSession, ");
    String _name_23 = e.getName();
    String _firstLower_13 = StringExtensions.toFirstLower(_name_23);
    _builder.append(_firstLower_13, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public List<");
        String _name_24 = e.getName();
        _builder.append(_name_24, "\t");
        _builder.append("> list(");
        String _name_25 = e.getName();
        _builder.append(_name_25, "\t");
        _builder.append(" ");
        String _name_26 = e.getName();
        String _firstLower_14 = StringExtensions.toFirstLower(_name_26);
        _builder.append(_firstLower_14, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return list(");
        String _name_27 = e.getName();
        String _firstLower_15 = StringExtensions.toFirstLower(_name_27);
        _builder.append(_firstLower_15, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileCount(final PojoDao d, final PojoEntity e, final /* Map<String, List<PojoMethodArg>> */Object toInits, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int count(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"count ");
    String _name_2 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(": \" + ");
    String _name_3 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_2, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlQueryEngine sqlEngine");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedQueryEngine(\"SELECT_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    {
      boolean _isEmpty = toInits.isEmpty();
      if (_isEmpty) {
        _builder.append("//");
      }
    }
    _builder.append("sqlControl = getMoreResultClasses(");
    String _name_5 = e.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_5);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("int count = sqlEngine");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(".queryCount(sqlSession, ");
    String _name_7 = e.getName();
    String _firstLower_4 = StringExtensions.toFirstLower(_name_7);
    _builder.append(_firstLower_4, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"count: \" + count);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int count(");
        String _name_8 = e.getName();
        _builder.append(_name_8, "\t");
        _builder.append(" ");
        String _name_9 = e.getName();
        String _firstLower_5 = StringExtensions.toFirstLower(_name_9);
        _builder.append(_firstLower_5, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return count(sqlSessionFactory.getSqlSession(), ");
        String _name_10 = e.getName();
        String _firstLower_6 = StringExtensions.toFirstLower(_name_10);
        _builder.append(_firstLower_6, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public int count(SqlSession sqlSession, ");
    String _name_11 = e.getName();
    _builder.append(_name_11, "\t");
    _builder.append(" ");
    String _name_12 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_12);
    _builder.append(_firstLower_7, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return count(sqlSession, ");
    String _name_13 = e.getName();
    String _firstLower_8 = StringExtensions.toFirstLower(_name_13);
    _builder.append(_firstLower_8, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int count(");
        String _name_14 = e.getName();
        _builder.append(_name_14, "\t");
        _builder.append(" ");
        String _name_15 = e.getName();
        String _firstLower_9 = StringExtensions.toFirstLower(_name_15);
        _builder.append(_firstLower_9, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return count(");
        String _name_16 = e.getName();
        String _firstLower_10 = StringExtensions.toFirstLower(_name_16);
        _builder.append(_firstLower_10, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileMoreResultClasses(final PojoDao d, final PojoEntity e, final /* Map<String, List<PojoMethodArg>> */Object toInits, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\nref cannot be resolved"
      + "\nfullyQualifiedName cannot be resolved");
  }
  
  public CharSequence compileIfx(final PojoDao d) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method pojo is undefined for the type ProcessorDaoGenerator"
      + "\nThe method pojo is undefined for the type ProcessorDaoGenerator"
      + "\ncompleteName cannot be resolved");
  }
  
  public CharSequence compileIfx(final PojoDao d, final PojoEntity e, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method methods is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallUpdate is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallFunction is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallQuery is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallQueryFunction is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallQueryFunction is undefined for the type ProcessorDaoGenerator"
      + "\nThe method isCallSelectFunction is undefined for the type ProcessorDaoGenerator"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\n|| cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved"
      + "\n|| cannot be resolved");
  }
  
  public CharSequence compileCallQueryIfx(final PojoDao d, final /* PojoMethod */Object m, final ImportManager im, final boolean isFunction, final boolean all) {
    throw new Error("Unresolved compilation problems:"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileCallFunctionIfx(final PojoDao d, final /* PojoMethod */Object m, final ImportManager im, final boolean all) {
    throw new Error("Unresolved compilation problems:"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileCallUpdateIfx(final PojoDao d, final /* PojoMethod */Object m, final ImportManager im, final boolean all) {
    throw new Error("Unresolved compilation problems:"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileCallSelectFunctionIfx(final PojoDao d, final /* PojoMethod */Object m, final ImportManager im, final boolean all) {
    throw new Error("Unresolved compilation problems:"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\ntype cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileInsertIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" insert(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_3 = e.getName();
        _builder.append(_name_3, "\t");
        _builder.append(" insert(");
        String _name_4 = e.getName();
        _builder.append(_name_4, "\t");
        _builder.append(" ");
        String _name_5 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_5);
        _builder.append(_firstLower_1, "\t");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("public ");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t");
    _builder.append(" insert(SqlSession sqlSession, ");
    String _name_7 = e.getName();
    _builder.append(_name_7, "\t");
    _builder.append(" ");
    String _name_8 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_8);
    _builder.append(_firstLower_2, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_9 = e.getName();
        _builder.append(_name_9, "\t");
        _builder.append(" insert(");
        String _name_10 = e.getName();
        _builder.append(_name_10, "\t");
        _builder.append(" ");
        String _name_11 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_11);
        _builder.append(_firstLower_3, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileGetIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" get(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_3 = e.getName();
        _builder.append(_name_3, "\t");
        _builder.append(" get(");
        String _name_4 = e.getName();
        _builder.append(_name_4, "\t");
        _builder.append(" ");
        String _name_5 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_5);
        _builder.append(_firstLower_1, "\t");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("public ");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(" get(SqlSession sqlSession, ");
    String _name_7 = e.getName();
    _builder.append(_name_7, "\t\t");
    _builder.append(" ");
    String _name_8 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_8);
    _builder.append(_firstLower_2, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_9 = e.getName();
        _builder.append(_name_9, "\t");
        _builder.append(" get(");
        String _name_10 = e.getName();
        _builder.append(_name_10, "\t");
        _builder.append(" ");
        String _name_11 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_11);
        _builder.append(_firstLower_3, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileUpdateIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int update(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int update(");
        String _name_2 = e.getName();
        _builder.append(_name_2, "\t");
        _builder.append(" ");
        String _name_3 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
        _builder.append(_firstLower_1, "\t");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("public int update(SqlSession sqlSession, ");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t");
    _builder.append(" ");
    String _name_5 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_5);
    _builder.append(_firstLower_2, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int update(");
        String _name_6 = e.getName();
        _builder.append(_name_6, "\t");
        _builder.append(" ");
        String _name_7 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
        _builder.append(_firstLower_3, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileDeleteIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int delete(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int delete(");
        String _name_2 = e.getName();
        _builder.append(_name_2, "\t");
        _builder.append(" ");
        String _name_3 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
        _builder.append(_firstLower_1, "\t");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("public int delete(SqlSession sqlSession, ");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t");
    _builder.append(" ");
    String _name_5 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_5);
    _builder.append(_firstLower_2, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int delete(");
        String _name_6 = e.getName();
        _builder.append(_name_6, "\t");
        _builder.append(" ");
        String _name_7 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
        _builder.append(_firstLower_3, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileListIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append("> list(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public List<");
        String _name_3 = e.getName();
        _builder.append(_name_3, "\t");
        _builder.append("> list(");
        String _name_4 = e.getName();
        _builder.append(_name_4, "\t");
        _builder.append(" ");
        String _name_5 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_5);
        _builder.append(_firstLower_1, "\t");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("public List<");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t");
    _builder.append("> list(SqlSession sqlSession, ");
    String _name_7 = e.getName();
    _builder.append(_name_7, "\t");
    _builder.append(" ");
    String _name_8 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_8);
    _builder.append(_firstLower_2, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public List<");
        String _name_9 = e.getName();
        _builder.append(_name_9, "\t");
        _builder.append("> list(");
        String _name_10 = e.getName();
        _builder.append(_name_10, "\t");
        _builder.append(" ");
        String _name_11 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_11);
        _builder.append(_firstLower_3, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileCountIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int count(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int count(");
        String _name_2 = e.getName();
        _builder.append(_name_2, "\t");
        _builder.append(" ");
        String _name_3 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
        _builder.append(_firstLower_1, "\t");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("public int count(SqlSession sqlSession, ");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t");
    _builder.append(" ");
    String _name_5 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_5);
    _builder.append(_firstLower_2, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int count(");
        String _name_6 = e.getName();
        _builder.append(_name_6, "\t");
        _builder.append(" ");
        String _name_7 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
        _builder.append(_firstLower_3, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileExtends(final PojoDao e, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from DaoType to PojoDao"
      + "\n!= cannot be resolved");
  }
  
  public CharSequence compileImplements(final PojoDao d) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method getDaoImplements is undefined for the type ProcessorDaoGenerator");
  }
  
  public void addImplements(final PojoDao e, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from PojoType to JvmType");
  }
  
  public void addExtends(final PojoDao e, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from PojoType to JvmType");
  }
  
  public boolean isExtends(final PojoDao e) {
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      {
        EList<PojoDao> _onlyDaos = ext.getOnlyDaos();
        boolean _isEmpty = _onlyDaos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          EList<PojoDao> _onlyDaos_1 = ext.getOnlyDaos();
          for (final PojoDao ee : _onlyDaos_1) {
            String _name = ee.getName();
            String _name_1 = e.getName();
            boolean _equals = Objects.equal(_name, _name_1);
            if (_equals) {
              return true;
            }
          }
          return false;
        }
        EList<PojoDao> _exceptDaos = ext.getExceptDaos();
        for (final PojoDao ee_1 : _exceptDaos) {
          String _name_2 = ee_1.getName();
          String _name_3 = e.getName();
          boolean _equals_1 = Objects.equal(_name_2, _name_3);
          if (_equals_1) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public boolean isExtends(final PojoDao e, final Extends ext) {
    EList<PojoDao> _onlyDaos = ext.getOnlyDaos();
    boolean _isEmpty = _onlyDaos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<PojoDao> _onlyDaos_1 = ext.getOnlyDaos();
      for (final PojoDao ee : _onlyDaos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    EList<PojoDao> _exceptDaos = ext.getExceptDaos();
    for (final PojoDao ee_1 : _exceptDaos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public Object getExtends(final PojoDao e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method simpleName is undefined for the type ProcessorDaoGenerator");
  }
  
  public boolean isImplements(final PojoDao e) {
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      {
        EList<PojoDao> _exceptDaos = ext.getExceptDaos();
        for (final PojoDao ee : _exceptDaos) {
          String _name = ee.getName();
          String _name_1 = e.getName();
          boolean _equals = Objects.equal(_name, _name_1);
          if (_equals) {
            return false;
          }
        }
        EList<PojoDao> _onlyDaos = ext.getOnlyDaos();
        boolean _isEmpty = _onlyDaos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          EList<PojoDao> _onlyDaos_1 = ext.getOnlyDaos();
          for (final PojoDao ee_1 : _onlyDaos_1) {
            String _name_2 = ee_1.getName();
            String _name_3 = e.getName();
            boolean _equals_1 = Objects.equal(_name_2, _name_3);
            if (_equals_1) {
              return true;
            }
          }
        } else {
          return true;
        }
      }
    }
    return false;
  }
  
  public boolean isImplements(final PojoDao e, final Implements ext) {
    EList<PojoDao> _onlyDaos = ext.getOnlyDaos();
    boolean _isEmpty = _onlyDaos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<PojoDao> _onlyDaos_1 = ext.getOnlyDaos();
      for (final PojoDao ee : _onlyDaos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    EList<PojoDao> _exceptDaos = ext.getExceptDaos();
    for (final PojoDao ee_1 : _exceptDaos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public ArrayList<Implements> getImplements(final PojoDao e) {
    final ArrayList<Implements> list = new ArrayList<Implements>();
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      boolean _isImplements = this.isImplements(e, ext);
      if (_isImplements) {
        list.add(ext);
      }
    }
    return list;
  }
  
  public String getImplPackage(final PojoDao e) {
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<ImplPackage> _filter = Iterables.<ImplPackage>filter(_eContents, ImplPackage.class);
    for (final ImplPackage ext : _filter) {
      return ext.getName();
    }
    return null;
  }
}
