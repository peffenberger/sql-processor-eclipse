/**
 * generated by Xtext
 */
package org.sqlproc.dsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.sqlproc.dsl.ImportManager;
import org.sqlproc.dsl.generator.ProcessorGeneratorUtils;
import org.sqlproc.dsl.processorDsl.Annotation;
import org.sqlproc.dsl.processorDsl.AnnotationProperty;
import org.sqlproc.dsl.processorDsl.EnumEntity;
import org.sqlproc.dsl.processorDsl.EnumProperty;
import org.sqlproc.dsl.processorDsl.Extends;
import org.sqlproc.dsl.processorDsl.Implements;
import org.sqlproc.dsl.processorDsl.PojoEntity;
import org.sqlproc.dsl.processorDsl.PojoProperty;
import org.sqlproc.dsl.util.Utils;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class ProcessorPojoGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Inject
  @Extension
  private ProcessorGeneratorUtils _processorGeneratorUtils;
  
  public CharSequence compile(final EnumEntity e) {
    StringConcatenation _builder = new StringConcatenation();
    final ImportManager im = new ImportManager(true);
    _builder.newLineIfNotEmpty();
    final EnumProperty eattr = Utils.getEnumAttr(e);
    _builder.newLineIfNotEmpty();
    this.addImplements(e, im);
    _builder.newLineIfNotEmpty();
    this.addExtends(e, im);
    _builder.newLineIfNotEmpty();
    final CharSequence classBody = this.compile(e, im, eattr);
    _builder.newLineIfNotEmpty();
    {
      EObject _eContainer = e.eContainer();
      boolean _notEquals = (!Objects.equal(_eContainer, null));
      if (_notEquals) {
        _builder.append("package ");
        EObject _eContainer_1 = e.eContainer();
        EObject _eContainer_2 = _eContainer_1.eContainer();
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_2);
        _builder.append(_fullyQualifiedName, "");
        _builder.append(";");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      List<String> _imports = im.getImports();
      boolean _isEmpty = _imports.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.newLine();
        {
          List<String> _imports_1 = im.getImports();
          for(final String i : _imports_1) {
            _builder.append("import ");
            _builder.append(i, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      String _sernum = Utils.getSernum(e);
      boolean _notEquals_1 = (!Objects.equal(_sernum, null));
      if (_notEquals_1) {
        _builder.newLine();
        _builder.append("import java.io.Serializable;");
        _builder.newLine();
      }
    }
    {
      EList<EnumProperty> _features = e.getFeatures();
      boolean _isEmpty_1 = _features.isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("import java.util.HashMap;");
        _builder.newLine();
        _builder.append("import java.util.Map;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append(classBody, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final EnumEntity e, final ImportManager im, final EnumProperty ea) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method value is undefined for the type ProcessorPojoGenerator"
      + "\nThe method value is undefined for the type ProcessorPojoGenerator"
      + "\n!= cannot be resolved");
  }
  
  public CharSequence compile(final PojoEntity e) {
    StringConcatenation _builder = new StringConcatenation();
    final ImportManager im = new ImportManager(true);
    _builder.newLineIfNotEmpty();
    this.addImplements(e, im);
    _builder.newLineIfNotEmpty();
    this.addExtends(e, im);
    _builder.newLineIfNotEmpty();
    final CharSequence classBody = this.compile(e, im);
    _builder.newLineIfNotEmpty();
    {
      EObject _eContainer = e.eContainer();
      boolean _notEquals = (!Objects.equal(_eContainer, null));
      if (_notEquals) {
        _builder.append("package ");
        EObject _eContainer_1 = e.eContainer();
        EObject _eContainer_2 = _eContainer_1.eContainer();
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_2);
        _builder.append(_fullyQualifiedName, "");
        _builder.append(";");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      List<String> _imports = im.getImports();
      boolean _isEmpty = _imports.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("\t");
        _builder.newLine();
        {
          List<String> _imports_1 = im.getImports();
          for(final String i : _imports_1) {
            _builder.append("import ");
            _builder.append(i, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      String _sernum = Utils.getSernum(e);
      boolean _notEquals_1 = (!Objects.equal(_sernum, null));
      if (_notEquals_1) {
        _builder.newLine();
        _builder.append("import java.io.Serializable;");
        _builder.newLine();
      }
    }
    {
      List<PojoAnnotatedProperty> _listFeatures = this.listFeatures(e);
      boolean _isEmpty_1 = _listFeatures.isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("import java.util.ArrayList;");
        _builder.newLine();
      }
    }
    {
      boolean _or = false;
      PojoProperty _hasIsDef = this.hasIsDef(e);
      boolean _notEquals_2 = (!Objects.equal(_hasIsDef, null));
      if (_notEquals_2) {
        _or = true;
      } else {
        PojoProperty _hasToInit = this.hasToInit(e);
        boolean _notEquals_3 = (!Objects.equal(_hasToInit, null));
        _or = _notEquals_3;
      }
      if (_or) {
        _builder.append("import java.util.Set;");
        _builder.newLine();
        _builder.append("import java.util.HashSet;");
        _builder.newLine();
        _builder.append("import java.lang.reflect.InvocationTargetException;");
        _builder.newLine();
        _builder.append("import org.apache.commons.beanutils.MethodUtils;");
        _builder.newLine();
      }
    }
    {
      boolean _and = false;
      boolean _hasOperators = Utils.hasOperators(e);
      if (!_hasOperators) {
        _and = false;
      } else {
        String _operatorsSuffix = Utils.getOperatorsSuffix(e);
        boolean _equals = Objects.equal(_operatorsSuffix, null);
        _and = _equals;
      }
      if (_and) {
        _builder.append("import java.util.Map;");
        _builder.newLine();
        _builder.append("import java.util.HashMap;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append(classBody, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final PojoEntity e, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method constName2 is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nThe method or field ae is undefined for the type ProcessorPojoGenerator"
      + "\nannotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nstaticAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nname cannot be resolved"
      + "\nstartsWith cannot be resolved"
      + "\nstaticAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nname cannot be resolved"
      + "\nsubstring cannot be resolved"
      + "\nconstructorAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconstructorAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nfeature cannot be resolved"
      + "\ncompileType cannot be resolved"
      + "\nfeature cannot be resolved"
      + "\nname cannot be resolved"
      + "\nfeature cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\n! cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\ncompileHashCode cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\ncompileEquals cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\ncompileToInit cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\ncompileEnumInit cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\ncompileIsDef cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\ncompileEnumDef cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\ncompileToString cannot be resolved");
  }
  
  public CharSequence compileAnnotationProperty(final AnnotationProperty f, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method getRef is undefined for the type ProcessorPojoGenerator"
      + "\nThe method getRef is undefined for the type ProcessorPojoGenerator"
      + "\nThe method getAnnotationValue is undefined for the type ProcessorPojoGenerator"
      + "\nType mismatch: cannot convert from PojoType to JvmType"
      + "\n!= cannot be resolved"
      + "\nfullyQualifiedName cannot be resolved");
  }
  
  public CharSequence compile(final PojoProperty f, final /* PojoAnnotatedProperty */Object aaf, final ImportManager im, final PojoEntity e, final /* AnnotatedEntity */Object ae, final String operatorSuffix) {
    throw new Error("Unresolved compilation problems:"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\ngetterAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nsetterAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved");
  }
  
  public CharSequence compileHashCode(final PojoProperty f, final /* PojoAnnotatedProperty */Object aaf, final ImportManager im, final PojoEntity e, final /* AnnotatedEntity */Object ae) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method attrs is undefined for the type ProcessorPojoGenerator"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nnative cannot be resolved"
      + "\n!= cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileEquals(final PojoProperty f, final /* PojoAnnotatedProperty */Object aaf, final ImportManager im, final PojoEntity e, final /* AnnotatedEntity */Object ae) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method attrs is undefined for the type ProcessorPojoGenerator"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nnative cannot be resolved"
      + "\n!= cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileToString(final PojoProperty f, final /* PojoAnnotatedProperty */Object aaf, final ImportManager im, final PojoEntity e, final /* AnnotatedEntity */Object ae) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method attrs is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileIsDef(final PojoProperty f, final /* PojoAnnotatedProperty */Object aaf, final ImportManager im, final PojoEntity e, final /* AnnotatedEntity */Object ae) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method attrs is undefined for the type ProcessorPojoGenerator"
      + "\nname cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved");
  }
  
  public CharSequence compileEnumDef(final PojoProperty f, final /* PojoAnnotatedProperty */Object aaf, final ImportManager im, final PojoEntity e, final /* AnnotatedEntity */Object ae) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method attrs is undefined for the type ProcessorPojoGenerator"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileToInit(final PojoProperty f, final /* PojoAnnotatedProperty */Object aaf, final ImportManager im, final PojoEntity e, final /* AnnotatedEntity */Object ae) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method attrs is undefined for the type ProcessorPojoGenerator"
      + "\nname cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nattributeAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved");
  }
  
  public CharSequence compileEnumInit(final PojoProperty f, final /* PojoAnnotatedProperty */Object aaf, final ImportManager im, final PojoEntity e, final /* AnnotatedEntity */Object ae) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method attrs is undefined for the type ProcessorPojoGenerator"
      + "\nname cannot be resolved");
  }
  
  public CharSequence compileOperators(final ImportManager im, final PojoEntity e, final /* AnnotatedEntity */Object ae) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nname cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nconflictAnnotations cannot be resolved"
      + "\ngetType cannot be resolved"
      + "\nfeatures cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nfeatures cannot be resolved");
  }
  
  public /* List<PojoAnnotatedProperty> */Object listFeatures(final PojoEntity e) {
    throw new Error("Unresolved compilation problems:"
      + "\nPojoAnnotatedProperty cannot be resolved to a type."
      + "\nType mismatch: cannot convert from PojoType to PojoEntity");
  }
  
  public List<PojoProperty> listFeatures1(final PojoEntity e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator");
  }
  
  public /* List<PojoAnnotatedProperty> */Object requiredFeatures(final PojoEntity e) {
    throw new Error("Unresolved compilation problems:"
      + "\nPojoAnnotatedProperty cannot be resolved to a type."
      + "\nType mismatch: cannot convert from PojoType to PojoEntity");
  }
  
  public /* ArrayList<PojoAnnotatedProperty> */Object requiredSuperFeatures(final PojoEntity e) {
    throw new Error("Unresolved compilation problems:"
      + "\nPojoAnnotatedProperty cannot be resolved to a type."
      + "\nType mismatch: cannot convert from PojoType to PojoEntity");
  }
  
  public List<PojoProperty> requiredFeatures1(final PojoEntity e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator");
  }
  
  public PojoProperty hasIsDef(final PojoEntity e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved");
  }
  
  public PojoProperty hasToInit(final PojoEntity e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method feature is undefined for the type ProcessorPojoGenerator"
      + "\nname cannot be resolved"
      + "\n== cannot be resolved");
  }
  
  public Object isAttribute(final PojoProperty f) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method getNative is undefined for the type ProcessorPojoGenerator"
      + "\nThe method getRef is undefined for the type ProcessorPojoGenerator"
      + "\n!= cannot be resolved"
      + "\n|| cannot be resolved"
      + "\n!= cannot be resolved"
      + "\n|| cannot be resolved");
  }
  
  public Object simplAttrs(final PojoProperty f) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method attrs is undefined for the type ProcessorPojoGenerator"
      + "\nThe method getNative is undefined for the type ProcessorPojoGenerator"
      + "\nThe method getType is undefined for the type ProcessorPojoGenerator"
      + "\nThere is no context to infer the closure\'s argument types from. Consider typing the arguments or put the closures into a typed context."
      + "\nfilter cannot be resolved"
      + "\n!= cannot be resolved"
      + "\n|| cannot be resolved"
      + "\n!= cannot be resolved"
      + "\ntoList cannot be resolved");
  }
  
  public CharSequence compileImplements(final EnumEntity e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _sernum = Utils.getSernum(e);
      boolean _notEquals = (!Objects.equal(_sernum, null));
      if (_notEquals) {
        _builder.append("implements Serializable");
      }
    }
    _builder.append(" ");
    return _builder;
  }
  
  public CharSequence compileExtends(final PojoEntity e, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from PojoType to PojoEntity"
      + "\n!= cannot be resolved");
  }
  
  public CharSequence compileImplements(final PojoEntity e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method simpleName is undefined for the type ProcessorPojoGenerator");
  }
  
  public boolean compile(final Extends e, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from PojoType to JvmType");
  }
  
  public void addImplements(final EnumEntity e, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from PojoType to JvmType");
  }
  
  public void addExtends(final EnumEntity e, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from PojoType to JvmType");
  }
  
  public void addImplements(final PojoEntity e, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from PojoType to JvmType");
  }
  
  public void addExtends(final PojoEntity e, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from PojoType to JvmType");
  }
  
  public void addAnnotations(final List<Annotation> annotations, final ImportManager im) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from PojoType to JvmType");
  }
  
  public Object getExtends(final EnumEntity e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method simpleName is undefined for the type ProcessorPojoGenerator");
  }
  
  public boolean isImplements(final EnumEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      return true;
    }
    return false;
  }
  
  public boolean isExtends(final PojoEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      {
        EList<PojoEntity> _onlyPojos = ext.getOnlyPojos();
        boolean _isEmpty = _onlyPojos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          EList<PojoEntity> _onlyPojos_1 = ext.getOnlyPojos();
          for (final PojoEntity ee : _onlyPojos_1) {
            String _name = ee.getName();
            String _name_1 = e.getName();
            boolean _equals = Objects.equal(_name, _name_1);
            if (_equals) {
              return true;
            }
          }
          return false;
        }
        EList<PojoEntity> _exceptPojos = ext.getExceptPojos();
        for (final PojoEntity ee_1 : _exceptPojos) {
          String _name_2 = ee_1.getName();
          String _name_3 = e.getName();
          boolean _equals_1 = Objects.equal(_name_2, _name_3);
          if (_equals_1) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public boolean isExtends(final PojoEntity e, final Extends ext) {
    EList<PojoEntity> _onlyPojos = ext.getOnlyPojos();
    boolean _isEmpty = _onlyPojos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<PojoEntity> _onlyPojos_1 = ext.getOnlyPojos();
      for (final PojoEntity ee : _onlyPojos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    EList<PojoEntity> _exceptPojos = ext.getExceptPojos();
    for (final PojoEntity ee_1 : _exceptPojos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public Object getExtends(final PojoEntity e) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method simpleName is undefined for the type ProcessorPojoGenerator");
  }
  
  public boolean isImplements(final PojoEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      {
        EList<PojoEntity> _exceptPojos = ext.getExceptPojos();
        for (final PojoEntity ee : _exceptPojos) {
          String _name = ee.getName();
          String _name_1 = e.getName();
          boolean _equals = Objects.equal(_name, _name_1);
          if (_equals) {
            return false;
          }
        }
        EList<PojoEntity> _onlyPojos = ext.getOnlyPojos();
        boolean _isEmpty = _onlyPojos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          EList<PojoEntity> _onlyPojos_1 = ext.getOnlyPojos();
          for (final PojoEntity ee_1 : _onlyPojos_1) {
            String _name_2 = ee_1.getName();
            String _name_3 = e.getName();
            boolean _equals_1 = Objects.equal(_name_2, _name_3);
            if (_equals_1) {
              return true;
            }
          }
        } else {
          return true;
        }
      }
    }
    return false;
  }
  
  public boolean isImplements(final PojoEntity e, final Implements ext) {
    EList<PojoEntity> _onlyPojos = ext.getOnlyPojos();
    boolean _isEmpty = _onlyPojos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<PojoEntity> _onlyPojos_1 = ext.getOnlyPojos();
      for (final PojoEntity ee : _onlyPojos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    EList<PojoEntity> _exceptPojos = ext.getExceptPojos();
    for (final PojoEntity ee_1 : _exceptPojos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public ArrayList<Implements> getImplements(final PojoEntity e) {
    final ArrayList<Implements> list = new ArrayList<Implements>();
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      boolean _isImplements = this.isImplements(e, ext);
      if (_isImplements) {
        list.add(ext);
      }
    }
    return list;
  }
}
